

CREATE OR REPLACE PROCEDURE <procedure_name> (
    OBJECT_NAME VARCHAR,
    THRESHOLD_LIMIT INT,
    AVG_DAY_COUNT INT,
    COLUMN_TO_VALIDATE VARCHAR,
    DQ_RUN_JOB_ID VARCHAR,
    MAX_LOAD-TS VARCHAR DEFAULT '',
    FILTER_CONDITION VARCHAR DEFAULT '')
RETURNS TABLE(THRESHOLD_PERIOD_AVG_COUNT VARCHAR, LATEST_LOAD_COUNT VARCHAR, THRESHOLD_LIMIT_STATUS VARCHAR)
LANGUAGE SQL
EXECUTE AS CALLER
AS
$$
DECLARE
    WHERE_CLAUSE VARCHAR DEFAULT '';
    THRESHOLD_PERIOD_COUNT INT;
    LATEST_LOAD_COUNT INT;
    THRESHOLD_PERIOD_AVG_COUNT INT;
    MAX_LOAD_DT VARCHAR DEFAULT '';
    THRESHOLD_LIMIT_STATUS VARCHAR;
    RS_THRESHOLD_CHECK_STATUS RESULTSET;
    ERROR_MSG VARCHAR;
    ENV VARCHAR DEFAULT SPLIT('{{DW_database_name}}','_')[2]::VARCHAR;
    LOG_STR VARCHAR DEFAULT '';
    PROCESS_START_TIME TIMESTAMP DEFAULT TO_TIMESTAMP_NTZ(CONVERT_TIMEZONE('America/Chicago', CURRENT_TIMESTAMP(5)));

BEGIN
     LOG_STR := 'Execution of PROC_DQ_THRESHOLD_CHECK_TEST is started ~~ '|| :PROCEDURE || '~~getting max load timestamp for the object';
     --getting max load timestamp if the max_load_ts is not provided in SP signature

    IF(:MAX_LOAD_TS = '') THEN
            EXECUTE IMMEDIATE 'SELECT MAX(' || :COLUMN_TO_VALIDATE || ') AS MAX_LOAD_DT FROM' || :OBJECT_NAME;
            SELECT MAX_LOAD_DT INTO :MAX_LOAD_DT FROM TABLE(result_scan(last_query_id()));

    ELSE
            MAX_LOAD_DT := MAX_LOAD_TS;

    END IF;

    LOG_STR := LOG_STR || '~~preparing where clause';

    --preparing where clause
    IF(IFNULL(TRIM(:FILTER_CONDITION),''))